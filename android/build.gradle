import groovy.json.JsonSlurper

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def warnNoAutoInit() {
    logger.warn("Couldn't auto-initialize the Heap library; please initialize it manually by following the instructions at https://docs.heap.io/docs/react-native.")
}

def warnDisabled() {
    logger.warn("Not auto-initializing the Heap library because it was manually disabled; set `enabled` to `true` in `heap.json` to enable auto-initialization.")
}

ext.HEAP_CONFIG_FILENAME = 'heap.config.json'
ext.HEAP_APP_ID_FIELD_NAME_DEV = 'HEAP_APP_ID_DEV'
ext.HEAP_APP_ID_FIELD_NAME_PROD = 'HEAP_APP_ID_PROD'

def heapAppId(buildType) {
    def file = rootProject.file("../${HEAP_CONFIG_FILENAME}")
    if (!file.exists()) { return warnNoAutoInit() }

    def jsonSlurper = new JsonSlurper()
    def data = jsonSlurper.parseText(file.text.trim())[buildType]
    def defaultData = jsonSlurper.parseText(file.text.trim())["default"]

    // Enable auto-initialization if a value isn't set
    def autoInit = true

    // KLUDGE: Can't use the elvis operator because we want to treat `null` and `false` differently.
    if (defaultData?.heapAutoInit != null) { autoInit = defaultData?.heapAutoInit }
    if (data?.heapAutoInit != null) { autoInit = data?.heapAutoInit }

    if (!autoInit) { return warnDisabled() }
    return data?.heapAppId ?: defaultData?.heapAppId ?: warnNoAutoInit();
}

buildscript {
    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.3'
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 26)
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 16)
        targetSdkVersion safeExtGet('targetSdkVersion', 26)
        versionCode 1
        versionName "1.0"

        // KLUDGE: Need to assign an empty string explicitly so the fields are generated. This is mainly
        // to avoid having to use reflection to figure out if an appId was set, and `null` values are disallowed.
        def devAppId = heapAppId("dev") ?: ""
        buildConfigField "String", HEAP_APP_ID_FIELD_NAME_DEV, "\"${devAppId}\""

        def prodAppId = heapAppId("prod") ?: ""
        buildConfigField "String", HEAP_APP_ID_FIELD_NAME_PROD, "\"${prodAppId}\""
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    mavenCentral()
    jcenter()
    google()
}

dependencies {
    implementation "com.facebook.react:react-native:${safeExtGet('reactNativeVersion', '+')}"
    api 'com.heapanalytics.android:heap-android-client:1.10.+'
}

